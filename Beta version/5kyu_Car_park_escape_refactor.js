//Beta version
function escape(carpark) {
    let result = [],
        pos = findStart();

    for (let i = pos[0]; i < carpark.length; i++) {
        if (pos[0] === carpark.length - 1 && pos[1] === carpark[carpark.length - 1].length - 1) break;
        else if (pos[0] === carpark.length - 1 && pos[1] !== carpark[carpark.length - 1].length) {
            result.push("R" + (carpark[carpark.length - 1].length - pos[1] - 1));
            break;
        }
        if (~carpark[i].indexOf(1)) {
            let stairs = carpark[i].indexOf(1),
                step = pos[1] - stairs;
            if (step > 0) result.push('L' + step);
            else result.push('R' + -step);

            let deep = 1;
            if (carpark[pos[0] + 1][stairs] === 1) {
                for (let j = pos[0] + 1; j < carpark.length; j++)
                    if (carpark[j][stairs] === 1) deep++;
                    else break;
            }

            result.push("D" + deep);

            pos[0] += deep;
            pos[1] = stairs;
            continue;
        }
    }

    return result;

    function findStart() {
        for (let i = 0; i < carpark.length; i++)
            for (let z = 0; z < carpark[i].length; z++)
                if (carpark[i][z] === 2) return [i, z];
    }
}


/*
carpark = [
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 2], //L3
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0], //L4
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0], //L1
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0], //R2
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0], //R2
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //L7
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //L2
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0], //R11
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], //L12
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0], //R9
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
    [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0],
    [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
    [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
];
result = [
    'L3', 'D1', 'L4', 'D1', 'L1', 'D1', 'R2', 'D1', 'R2', 'D1',
    'L7', 'D1', 'L2', 'D1', 'R11', 'D1', 'L12', 'D1', 'R9', 'D2',
    'L4', 'D1', 'L5', 'D1', 'R9', 'D1', 'L3', 'D1', 'R7', 'D1',
    'L9', 'D1', 'R9', 'D1', 'L11', 'D1', 'R6', 'D1', 'L7', 'D1',
    'L1', 'D1', 'R3', 'D1', 'R11', 'D1', 'L7', 'D1', 'L5', 'D1',
    'R12', 'D1', 'L3', 'D1', 'L1', 'D1', 'L9', 'D1', 'R6', 'D1',
    'L4', 'D1', 'L1', 'D1', 'R4', 'D1', 'L1', 'D1', 'R2', 'D1',
    'L2', 'D1', 'R4', 'D1', 'R4', 'D1', 'L9', 'D1', 'R1', 'D1',
    'R7', 'D1', 'L6', 'D1', 'R3', 'D2', 'R3', 'D1', 'L8', 'D1',
    'R2', 'D1', 'R5', 'D1', 'L8', 'D1', 'R2', 'D1', 'R9'
];

let ans = escape(carpark),
    indProb = [];
console.log(result.every((a, i) => {
    if (a === ans[i]) return true;
    else indProb.push(i);
}));
console.log(indProb);
console.log(ans);
*/
